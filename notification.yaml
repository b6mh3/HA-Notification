shell_command:
  #event_input correspond to the input_text.event_input
  prepend_event_log_user: >
    /bin/bash -c "
    echo -e '{{ event_input | replace('\n', '\\n') }}\n{{ now().strftime('%Y-%m-%d %H:%M:%S') }}\n' | 
    cat - /config/www/event_log_user.txt |
    awk -v RS='' -v ORS='\n\n' 'BEGIN {count=0} {count++; if (count<=50) print}' > /config/www/event_log_user.tmp && 
    mv /config/www/event_log_user.tmp /config/www/event_log_user.txt"
  refresh_event_log_user: "sed -i 's/ (unread)//g; s/(unread) //g; s/(unread)//g' /config/www/event_log_user.txt"

command_line:
  - sensor:
      name: Event Log user
      command: "bash /config/www/log_to_json_user.sh 2>&1" # Capture script errors too
      scan_interval: 5 # Run every 60 seconds
      value_template: "{{ value_json.last_update | default('Unknown') }}" # Use 'last_update' field or default to 'Unknown'
      json_attributes:
        - events # Store the events array as attributes
# /bin/bash -c "echo -e \"{{ event_input | replace('\n', '\\n') }}\n{{ now().strftime('%Y-%m-%d %H:%M:%S') }}\n\" | cat - /config/www/event_log.txt | head -n 100 > /config/www/event_log.tmp && mv /config/www/event_log.tmp /config/www/event_log.txt"
